# Load required libraries
install.packages("tseries")
install.packages("forecast")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("lubridate")
library(tseries)
library(forecast)
library(ggplot2)
library(dplyr)
library(lubridate)

# Load and clean data
data <- read_csv("Retail_Sales.csv")  # Replace with actual file
clean_data <- na.omit(data)  # Remove missing values

# Aggregate sales data by date
daily_sales <- clean_data %>%
  group_by(InvoiceDate) %>%
  summarise(total_sales = sum(Quantity * UnitPrice))

# View(daily_sales)  # Uncomment to inspect data

# Convert to time series
ts_sales <- ts(daily_sales$total_sales, frequency = 7)

# Decompose the data
decomposed_sales <- decompose(ts_sales)
plot(decomposed_sales)

# Remove seasonal component
decomp <- stl(ts_sales, s.window = "periodic")
plot(decomp)
deseasonal <- seasadj(decomp)

# Stationarity test
adf_test_result <- adf.test(deseasonal, alternative = "stationary")
print(adf_test_result)

# ACF & PACF plots to determine p and q
par(mfrow = c(2,1))
acf(deseasonal, main = "ACF of Differenced Sales Series")
pacf(deseasonal, main = "PACF of Differenced Sales Series")

# Fit ARIMA model with selected (p, d, q)
sales_ds_m1 <- arima(deseasonal, order = c(1,0,2))
print(sales_ds_m1)

# Residual analysis
tsdisplay(residuals(sales_ds_m1), lag.max = 40, main = 'Fitting the Model')

# Auto.arima model
auto_model <- auto.arima(ts_sales, seasonal = TRUE)
print(auto_model)

# Fit optimized ARIMA model
opt_sales <- arima(ts_sales, order = c(2,1,3), seasonal = list(order = c(1, 0, 1), period = 7))
tsdisplay(residuals(opt_sales), lag.max = 40, main = 'Trained Sales Model')

# Forecast for next 3 months
opt_sales_forecast <- forecast(opt_sales, h = 12)
plot(opt_sales_forecast)

# Weekly Sales Forecasting
weekly_sales <- daily_sales %>%
  mutate(InvoiceDate = as.Date(InvoiceDate)) %>%
  group_by(Week = isoweek(InvoiceDate)) %>%
  summarise(total_sales = sum(total_sales))

# Convert to time series
ts_sales_week <- ts(weekly_sales$total_sales, frequency = 4)

# Decompose and remove seasonality
decomposed_sales_weekly <- decompose(ts_sales_week)
plot(decomposed_sales_weekly)

decomp_weekly <- stl(ts_sales_week, s.window = "periodic")
plot(decomp_weekly)
deseasonal_weekly <- seasadj(decomp_weekly)

# Stationarity check for weekly data
adf_test_weekly <- adf.test(deseasonal_weekly, alternative = "stationary")
print(adf_test_weekly)

# First difference for stationarity
sales_d1 <- diff(deseasonal_weekly, differences = 1)
plot(sales_d1)

# ACF & PACF plots for weekly data
par(mfrow = c(2,1))
acf(sales_d1, main = "ACF of Differenced Weekly Sales")
pacf(sales_d1, main = "PACF of Differenced Weekly Sales")

# Fit ARIMA model for weekly sales
sales_d1_fit <- arima(deseasonal_weekly, order = c(1,1,0))
print(sales_d1_fit)
tsdisplay(residuals(sales_d1_fit), lag.max = 15, main = 'Fitting the Weekly Model')

# Auto.arima for weekly data
auto_model_weekly <- auto.arima(ts_sales_week, seasonal = TRUE)
print(auto_model_weekly)

# Fit optimized ARIMA model for weekly data
opt_sales_weekly <- arima(ts_sales_week, order = c(0,1,0))
tsdisplay(residuals(opt_sales_weekly), lag.max = 15, main = 'Trained Weekly Sales Model')

# Forecast weekly sales for next 3 months
opt_sales_weekly_forecast <- forecast(opt_sales_weekly, h = 3)
plot(opt_sales_weekly_forecast)
print(opt_sales_weekly_forecast)

# Summary of findings
cat("\n### Model Comparison ###\n")
cat("Daily Model (ARIMA(1,0,2)): AIC =", sales_ds_m1$aic, "\n")
cat("Daily Model (Auto.arima ARIMA(2,1,3)(1,0,1)[7]): AIC =", auto_model$aic, "\n")
cat("Weekly Model (ARIMA(1,1,0)): AIC =", sales_d1_fit$aic, "\n")
cat("Weekly Model (ARIMA(0,1,0)): AIC =", auto_model_weekly$aic, "\n")
