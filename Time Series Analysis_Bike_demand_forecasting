# CitiBike Demand Forecasting using Time Series Analysis
# Load required libraries
install.packages("TTR")
install.packages("forecast")
install.packages("ggplot2")
install.packages("readr")
install.packages("dplyr")
install.packages("lubridate")
library(TTR)
library(forecast)
library(ggplot2)
library(readr)
library(dplyr)
library(lubridate)

# Load data
data <- read_csv("CitiBike_Oct2016_BikeDemand.csv")

# Select first 2 stations
data <- data[1:3]
data$time <- as.POSIXct(data$time, format = "%m/%d/%Y %H:%M")

# Decomposition for Station 72
ts_data_72 <- ts(data$`72`, frequency = 24)
decomposed_1 <- decompose(ts_data_72)
plot(decomposed_1)

# Decomposition for Station 79
ts_data_79 <- ts(data$`79`, frequency = 24)
decomposed_2 <- decompose(ts_data_79)
plot(decomposed_2)

# Moving Average Function
movavg <- function(x, n, type = c("s", "t", "w", "m", "e", "r")) {
  stopifnot(is.numeric(x), is.numeric(n))
  nx <- length(x)
  y <- numeric(nx)
  if (type == "s") {
    for (k in 1:(n-1)) y[k] <- mean(x[1:k])
    for (k in n:nx) y[k] <- mean(x[(k-n+1):k])
  } else if (type == "e") {
    a <- 2 / (n + 1)
    y[1] <- x[1]
    for (k in 2:nx) y[k] <- a * x[k] + (1 - a) * y[k-1]
  }
  return(y)
}

# Plot Moving Averages for Station 72
bike_demand72 <- data$`72`
plot(bike_demand72, type = "l", col = 1, ylim = c(0, 30), main = "Bike Demand Moving Averages (Station 72)")
lines(movavg(bike_demand72, 30, "s"), col = 2)
lines(movavg(bike_demand72, 50, "w"), col = 5)

# Plot Moving Averages for Station 79
bike_demand79 <- data$`79`
plot(bike_demand79, type = "l", col = 1, ylim = c(0, 30), main = "Bike Demand Moving Averages (Station 79)")
lines(movavg(bike_demand79, 30, "s"), col = 2)
lines(movavg(bike_demand79, 50, "w"), col = 5)

# ARIMA Forecasting for Station 72 (Hourly)
arima_fit_station_72 <- auto.arima(ts_data_72)
forecast_station_72 <- forecast(arima_fit_station_72, h = 3)
plot(forecast_station_72)

# ARIMA Forecasting for Station 79 (Hourly)
arima_fit_station_79 <- auto.arima(ts_data_79)
forecast_station_79 <- forecast(arima_fit_station_79, h = 3)
plot(forecast_station_79)

# Aggregating Hourly Data to Daily
data$time <- as.Date(data$time)
daily_data <- data %>%
  group_by(time) %>%
  summarise(station_72_demand = sum(`72`), station_79_demand = sum(`79`))

# ARIMA Forecasting for Station 72 (Daily)
ts_data_72_daily <- ts(daily_data$station_72_demand, frequency = 1)
arima_fit_station_72_daily <- auto.arima(ts_data_72_daily)
forecast_station_72_daily <- forecast(arima_fit_station_72_daily, h = 3)
plot(forecast_station_72_daily)

# ARIMA Forecasting for Station 79 (Daily)
ts_data_79_daily <- ts(daily_data$station_79_demand, frequency = 1)
arima_fit_station_79_daily <- auto.arima(ts_data_79_daily)
forecast_station_79_daily <- forecast(arima_fit_station_79_daily, h = 3)
plot(forecast_station_79_daily)

# Print Summary
print(forecast_station_72_daily$mean)
print(forecast_station_79_daily$mean)
